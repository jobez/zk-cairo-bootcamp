{:highlights [{:id #uuid "635ad09b-ea8e-4983-8022-f0519139e0a1", :page 1, :position {:bounding {:x1 0, :y1 270.00001525878906, :x2 735.8709945678711, :y2 598.4791870117188, :width 897.6, :height 1161.6000000000001}, :rects ({:x1 0, :y1 270.00001525878906, :x2 0, :y2 289.3333511352539, :width 897.6, :height 1161.6000000000001} {:x1 0, :y1 286.00001525878906, :x2 0, :y2 305.3333511352539, :width 897.6, :height 1161.6000000000001} {:x1 127.54833984375, :y1 543.6250305175781, :x2 735.4291381835938, :y2 558.2916870117188, :width 897.6, :height 1161.6000000000001} {:x1 107.70833587646484, :y1 563.7187805175781, :x2 735.8709945678711, :y2 578.3854370117188, :width 897.6, :height 1161.6000000000001} {:x1 107.70833587646484, :y1 583.8125305175781, :x2 626.6434555053711, :y2 598.4791870117188, :width 897.6, :height 1161.6000000000001}), :page 1}, :content {:text " This system is non-stopping, accepting new transactions, creating new blocks and always growing the state. To handle this complexity and especially the growing volume of data, the blockchain architects re-used fundamental data structures known throughout the history of computer science, but combined them in new forms."}, :properties {:color "yellow"}} {:id #uuid "635ad1a3-6bdc-4abe-a6d3-a4d1416221fe", :page 2, :position {:bounding {:x1 0, :y1 494.0000228881836, :x2 790.0650634765625, :y2 847.7187805175781, :width 897.6, :height 1161.6000000000001}, :rects ({:x1 0, :y1 494.0000228881836, :x2 0, :y2 513.3333587646484, :width 897.6, :height 1161.6000000000001} {:x1 0, :y1 510.0000305175781, :x2 0, :y2 529.3333587646484, :width 897.6, :height 1161.6000000000001} {:x1 0, :y1 526.0000305175781, :x2 0, :y2 545.3333587646484, :width 897.6, :height 1161.6000000000001} {:x1 161.5625, :y1 772.7708740234375, :x2 789.7203369140625, :y2 787.4375305175781, :width 897.6, :height 1161.6000000000001} {:x1 161.5625, :y1 792.8646240234375, :x2 790.0650634765625, :y2 807.5312805175781, :width 897.6, :height 1161.6000000000001} {:x1 161.5625, :y1 812.9583740234375, :x2 789.4977416992188, :y2 827.6250305175781, :width 897.6, :height 1161.6000000000001} {:x1 161.5625, :y1 833.0521240234375, :x2 207.7799301147461, :y2 847.7187805175781, :width 897.6, :height 1161.6000000000001}), :page 2}, :content {:text "Blockchain platforms operate with enormous number of keys that must be looked-up from underlying data sources. Due to distribute nature, they furthermore need to be trustworthy. For these reasons, blockchain platforms try to employ effective algorithms for searching and cryptography. They mostly use and extend structures mentioned in following sections."}, :properties {:color "yellow"}} {:id #uuid "636178a1-dc0b-410b-8130-c98aea87b786", :page 3, :position {:bounding {:x1 -0.00653076171875, :y1 254.00003051757812, :x2 1142.4716796875, :y2 622.8695907592773, :width 1142.3999999999999, :height 1478.3999999999999}, :rects ({:x1 0, :y1 254.00003051757812, :x2 0, :y2 273.3333740234375, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 459.2708435058594, :y1 559.7029228210449, :x2 1142.4716796875, :y2 587.7029266357422, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 294.46856689453125, :y1 564.5258407592773, :x2 936.8460693359375, :y2 583.8591766357422, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 -0.00653076171875, :y1 585.2758407592773, :x2 232.96875, :y2 622.8695907592773, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 152.64583587646484, :y1 590.0987548828125, :x2 260.8002166748047, :y2 609.4320907592773, :width 1142.3999999999999, :height 1478.3999999999999}), :page 3}, :content {:text "The prefix tree will need 30 + 22 = 34 bits, while storing every address independently will need32 × 22 = 128 bits."}, :properties {:color "yellow"}} {:id #uuid "636178a5-396e-4b91-b5de-390847d18266", :page 3, :position {:bounding {:x1 -0.00653076171875, :y1 254.00003051757812, :x2 1142.4716796875, :y2 622.8695907592773, :width 1142.3999999999999, :height 1478.3999999999999}, :rects ({:x1 0, :y1 254.00003051757812, :x2 0, :y2 273.3333740234375, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 459.2708435058594, :y1 559.7029228210449, :x2 1142.4716796875, :y2 587.7029266357422, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 294.46856689453125, :y1 564.5258407592773, :x2 936.8460693359375, :y2 583.8591766357422, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 -0.00653076171875, :y1 585.2758407592773, :x2 232.96875, :y2 622.8695907592773, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 152.64583587646484, :y1 590.0987548828125, :x2 260.8002166748047, :y2 609.4320907592773, :width 1142.3999999999999, :height 1478.3999999999999}), :page 3}, :content {:text "The prefix tree will need 30 + 22 = 34 bits, while storing every address independently will need32 × 22 = 128 bits."}, :properties {:color "yellow"}} {:id #uuid "636178b1-1513-45b4-8664-d36038529e20", :page 3, :position {:bounding {:x1 0, :y1 254.00003051757812, :x2 936.8460693359375, :y2 609.4375457763672, :width 1142.3999999999999, :height 1478.3999999999999}, :rects ({:x1 0, :y1 254.00003051757812, :x2 0, :y2 273.3333740234375, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 290.4489440917969, :y1 564.5312919616699, :x2 936.8460693359375, :y2 583.8646278381348, :width 1142.3999999999999, :height 1478.3999999999999} {:x1 137.0833339691162, :y1 590.1042098999023, :x2 260.8002166748047, :y2 609.4375457763672, :width 1142.3999999999999, :height 1478.3999999999999}), :page 3}, :content {:text " The prefix tree will need 30 + 22 = 34 bits, while storing every address independently will need32 × 22 = 128 bits."}, :properties {:color "yellow"}} {:id #uuid "636405fd-626e-41d5-8ab5-22655fe5a169", :page 4, :position {:bounding {:x1 0, :y1 238, :x2 933.5049285888672, :y2 517.5520935058594, :width 1060.8, :height 1372.8}, :rects ({:x1 0, :y1 238, :x2 0, :y2 257.3333435058594, :width 1060.8, :height 1372.8} {:x1 0, :y1 254, :x2 0, :y2 273.3333435058594, :width 1060.8, :height 1372.8} {:x1 0, :y1 270, :x2 0, :y2 289.3333435058594, :width 1060.8, :height 1372.8} {:x1 208.20834350585938, :y1 428.9895935058594, :x2 933.5025329589844, :y2 446.32293701171875, :width 1060.8, :height 1372.8} {:x1 190.93750762939453, :y1 452.72918701171875, :x2 933.4911575317383, :y2 470.0625, :width 1060.8, :height 1372.8} {:x1 190.93750762939453, :y1 476.47918701171875, :x2 933.5049285888672, :y2 493.8125, :width 1060.8, :height 1372.8} {:x1 190.93750762939453, :y1 500.21875, :x2 832.038215637207, :y2 517.5520935058594, :width 1060.8, :height 1372.8}), :page 4}, :content {:text "This data structure is effective in terms of speed because it can be represented as a two-dimensional array and thus accessed via indexes in this array. On the other hand, it has big memory overhead especially when the structure is sparse. This problem may be overcame by representing paths by linked lists as proposed by Briandais [ 10 ] so that all possible branches from one node are represented as a tree, composing a forest of tries from all nodes."}, :properties {:color "yellow"}}]}